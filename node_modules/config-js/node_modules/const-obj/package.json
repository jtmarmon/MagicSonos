{
  "name": "const-obj",
  "version": "0.0.3",
  "description": "A simple module that makes all properties constant.",
  "tags": [
    "utilities",
    "JavaScript",
    "node.js",
    "object",
    "constant"
  ],
  "author": {
    "name": "Edmond Meinfelder",
    "email": "edmond@stdarg.com"
  },
  "maintainers": "Edmond Meinfelder <edmond@stdarg.com>",
  "homepage": "http://github.com/stdarg/const-obj",
  "repository": {
    "type": "git",
    "url": "git@github.com:stdarg/const-obj.git"
  },
  "bugs": {
    "url": "http://github.com/stdarg/const-obj/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib/const-obj.js",
  "scripts": {
    "test": "mocha --reporter list"
  },
  "engines": {
    "node": ">=v0.8.0"
  },
  "dependencies": {
    "is2": ""
  },
  "devDependencies": {
    "mocha": "1.8.1"
  },
  "readme": "# Introduction\nA simple node.js module that recursively iterates over an object and makes the\nproperties read-only. This is useful for values in objects that are never to\nchange. This simple module exports only two methods explained below.\n\n# Installation\n\n    $ npm install const-obj\n\n# API\n\nThe following are exported from the const-obj module:\n\n  - [makeObjConst()](#makeobjconstobjobject)\n  - [makePropConst()](#makepropconstobjectobjectpropertystring)\n\n## makeObjConst(obj:Object)\nRecursively makes each property in the object and its sub-objects immutable.\nThis function returns the object upon success and false upon failure.\n\n## makePropConst(object:Object, property:String)\nMake a property immutable (assuring it cannot be changed from the current\nvalue).  This operation cannot be un-done. This function returns the object on\nsuccess and false on any failure.\n\n# Examples\n\n    var makeObjConst = require('const-obj').makeObjConst;\n    var obj = {\n        a: 111,\n        b: '222',\n        c: { d: 333 } };\n    makeObjConst(obj);\n    obj.a = 222;            // this is legal, but has no effect\n    assert.ok(obj.a === 111);\n    obj.b = 'Hmm';          // this is legal, but has no effect\n    assert.ok(obj.b === '222');\n    obj.c.d = true;\n    assert.ok(obj.c.d === 333);\n\nThe above code would not throw because the values cannot be changed. Also,\nassignments to constant properties does not cause errors.\n\n        var makePropConst = require('const-obj').makePropConst;\n        var obj = { alpha: '0', beta: false };\n        makePropConst(obj, 'alpha');\n        obj.alpha = 678;\n        assert.ok(obj.alpha === '0');\n        obj.beta = true;\n        assert.ok(obj.beta === true);\n\nThe above code will not throw because the property is constant and cannot be\nchanged.\n\n# License\n[The MIT License (MIT)](http://opensource.org/licenses/MIT/ \"MIT License webpage\")\n",
  "readmeFilename": "README.md",
  "_id": "const-obj@0.0.3",
  "dist": {
    "shasum": "859d77c1aaea3f905e543908aa7985369d4442f5"
  },
  "_from": "const-obj@0.0.3",
  "_resolved": "https://registry.npmjs.org/const-obj/-/const-obj-0.0.3.tgz"
}
