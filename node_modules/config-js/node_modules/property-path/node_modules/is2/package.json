{
  "name": "is2",
  "version": "0.0.11",
  "description": "A type checking library where each exported function returns either true or false and does not throw. Also added tests.",
  "tags": [
    "utilities",
    "JavaScript",
    "node.js",
    "validation",
    "type",
    "checking"
  ],
  "author": {
    "name": "Enrico Marino",
    "email": "enrico.marino@email.com"
  },
  "maintainers": "Edmond Meinfelder <edmond@stdarg.com>",
  "homepage": "http://github.com/stdarg/is2",
  "repository": {
    "type": "git",
    "url": "git@github.com:stdarg/is2.git"
  },
  "bugs": {
    "url": "http://github.com/stdarg/is/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://opensource.org/licenses/MIT"
    }
  ],
  "main": "./lib/is2.js",
  "scripts": {
    "test": "mocha --reporter list"
  },
  "engines": {
    "node": ">=v0.6.0"
  },
  "dependencies": {
    "deep-is": "0.1.2"
  },
  "devDependencies": {
    "mocha": "1.8.1",
    "jsdom": "0.5.0"
  },
  "readme": "is2\n===\nis2 is a type-checking module for node.js to test values. Is does not throw\nexceptions and every function only returns true or false. Use is2 to validate\ntypes in your node.js code. Every function in is2 returns either true of false.\n\nAfter finding Enrico Marino's module is, the concise syntax amazed, but there\nwere syntax issues that made using is difficult. This fork of is fixes those\nissues, but the module is no longer cross-platform. Also, added tests via mocha\nwhich can be run using 'npm test'.\n\n## Installation\nTo install is2, type:\n\n    $ npm install is2\n\n## Usage\n\n    var is = require('is2');\n\n    console.log('true is equal to 1===1: '+(is.equal(true, 1===1));\n    console.log('10 is a positive number: '+(is.positiveNumber(10));\n    console.log('11 is an odd number: '+(is.oddNumber(11));\n\n## API\n\n### type\\(value, type\\)\nTest if 'value' is a type of 'type'.\nAlias: a\n\n##### Params: \n* **value** *value* to test.\n* **String** *type* THe name of the type.\n\n##### Returns:\n* **Boolean** true if 'value' is an arguments object, false otherwise.\n\n### defined\\(value\\)\nTest if 'value' is defined.\nAlias: def\n\n##### Params: \n* **Any** *value* The value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is defined, false otherwise.\n\n### nullOrUndef\\(value\\)\nTest is 'value' is either null or undefined.\nAlias: nullOrUndef\n\n##### Params: \n* **Any** *value* value to test.\n\n##### Returns:\n* **Boolean** True if value is null or undefined, false otherwise.\n\n### empty\\(value\\)\nTest if 'value' is empty. To be empty means to be an array, object or string\nwith nothing contained.\n\n##### Params: \n* **Any** *value* value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is empty, false otherwise.\n\n### objEquals\\(value, other\\)\nDo a deep comparision of two objects for equality. Will recurse without any\nlimits. Meant to be called by equal only.\n\n##### Params: \n* **Object** *value* The first object to compare.\n* **Object** *other* The second object to compare.\n\n##### Returns:\n* **Boolean** true, if the objects are equivalent, false otherwise.\n\n### equal\\(value, other\\)\nTest if 'value' is equal to 'other'. Works for objects and arrays and will do\ndeep comparisions, using recursion.\nAlias: eq\n\n##### Params: \n* **Any** *value* value.\n* **Any** *other* value to compare with.\n\n##### Returns:\n* **Boolean** true if 'value' is equal to 'other', false otherwise\n\n### hosted\\(value, host\\)\nTest if 'key' in host is an object. To be hosted means host\\[value\\] is an\nobject.\n\n##### Params: \n* **Any** *value* The value to test.\n* **Any** *host* Host that may contain value.\n\n##### Returns:\n* **Boolean** true if 'value' is hosted by 'host', false otherwise.\n\n### instanceOf\\(value\\)\nTest if 'value' is an instance of 'constructor'.\nAliases: instOf, instanceof\n\n##### Params: \n* **Any** *value* value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is an instance of 'constructor'.\n\n### buffer\\(value\\)\nTest if 'value' is an instance of Buffer.\n\n##### Params: \n* **Any** *value* value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is an instance of 'constructor'.\n\n### null\\(value\\)\nTest if 'value' is null.\n\n##### Params: \n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is null, false otherwise.\n\n### undefined\\(value\\)\nTest if 'value' is undefined.\nAliases: undef, udef\n\n##### Params: \n* **Any** *value* value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is undefined, false otherwise.\n\n### arguments\\(value\\)\nTest if 'value' is an arguments object.\nAlias: args\n\n##### Params: \n* **Any** *value* value to test\n\n##### Returns:\n* **Boolean** true if 'value' is an arguments object, false otherwise\n\n### emptyArguments\\(value\\)\nTest if 'value' is an arguments object that is empty.\nAlias: args\n\n##### Params: \n* **Any** *value* value to test\n\n##### Returns:\n* **Boolean** true if 'value' is an arguments object with no args, false\n  otherwise\n\n### array\\(value\\)\nTest if 'value' is an array.\nAlias: ary, arry\n\n##### Params: \n* **Any** *value* value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is an array, false otherwise.\n\n### nonEmptyArray\\(value\\)\nTest if 'value' is an array containing at least 1 entry.\nAliases: nonEmptyArry, nonEmptyAry\n\n##### Params: \n* **Any** *value* The value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is an array with at least 1 value, false\n  otherwise.\n\n### nonEmptyArray\\(value\\)\nTest if 'value' is an array containing no entries.\nAliases: emptyArry, emptyAry\n\n##### Params: \n* **Any** *value* The value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is an array with no elemnets.\n\n### empty\\(value\\)\nTest if 'value' is an empty array\\(like\\) object.\nAliases: arguents.empty, args.empty, ary.empty, arry.empty\n\n##### Params: \n* **Any** *value* value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is an empty array\\(like\\), false otherwise.\n\n### arrayLike\\(value\\)\nTest if 'value' is an arraylike object \\(i.e. it has a length property with a\nvalid value\\)\nAliases: arraylike, arryLike, aryLike\n\n##### Params: \n* **Any** *value* value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is an arguments object, false otherwise.\n\n### boolean\\(value\\)\nTest if 'value' is a boolean.\nAlias: bool\n\n##### Params: \n* **Any** *value* value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a boolean, false otherwise.\n\n### false\\(value\\)\nTest if 'value' is false.\n\n##### Params: \n* **Any** *value* value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is false, false otherwise\n\n### true\\(value\\)\nTest if 'value' is true.\n\n##### Params: \n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is true, false otherwise.\n\n### date\\(value\\)\nTest if 'value' is a date.\n\n##### Params: \n* **Any** *value* value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a date, false otherwise.\n\n### error\\(value\\)\nTest if 'value' is an error object.\nAlias: err\n\n##### Params: \n* **value** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is an error object, false otherwise.\n\n### function\\(value\\)\nTest if 'value' is a function.\nAlias: func\n\n##### Params: \n* **Any** *value* value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a function, false otherwise.\n\n### number\\(value\\)\nTest if 'value' is a number.\nAlias: num\n\n##### Params: \n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a number, false otherwise.\n\n### positiveNumber\\(value\\)\nTest if 'value' is a positive number.\nAlias: positiveNum, posNum\n\n##### Params: \n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a number, false otherwise.\n\n### negativeNumber\\(value\\)\nTest if 'value' is a negative number.\nAliases: negNum, negativeNum\n\n##### Params: \n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a number, false otherwise.\n\n### decimal\\(value\\)\nTest if 'value' is a decimal number.\nAliases: decimalNumber, decNum\n\n##### Params: \n* **Any** *value* value to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a decimal number, false otherwise.\n\n### divisibleBy\\(value, n\\)\nTest if 'value' is divisible by 'n'.\nAlias: divisBy\n\n##### Params: \n* **Number** *value* value to test.\n* **Number** *n* dividend.\n\n##### Returns:\n* **Boolean** true if 'value' is divisible by 'n', false otherwise.\n\n### int\\(value\\)\nTest if 'value' is an integer.\nAlias: integer\n\n##### Params: \n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is an integer, false otherwise.\n\n### positiveInt\\(value\\)\nTest if 'value' is a positive integer.\nAlias: posInt\n\n##### Params: \n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a positive integer, false otherwise.\n\n### negativeInt\\(value\\)\nTest if 'value' is a negative integer.\nAliases: negInt, negativeInteger\n\n##### Params: \n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a negative integer, false otherwise.\n\n### maximum\\(value, others\\)\nTest if 'value' is greater than 'others' values.\nAlias: max\n\n##### Params: \n* **Number** *value* value to test.\n\n* **Array** *others* values to compare with.\n##### Returns:\n\n* **Boolean** true if 'value' is greater than 'others' values.\n### minimum\\(value, others\\)\n\nTest if 'value' is less than 'others' values.\nAlias: min\n##### Params: \n\n* **Number** *value* value to test.\n* **Array** *others* values to compare with.\n\n##### Returns:\n* **Boolean** true if 'value' is less than 'others' values.\n\n### nan\\(value\\)\nis.nan\nTest if `value` is not a number.\n\n##### Params: \n* **Mixed** *value* value to test\n\n##### Returns:\n* **Boolean** true if `value` is not a number, false otherwise\n\n### even\\(value\\)\nTest if 'value' is an even number.\n\n##### Params: \n* **Number** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is an even number, false otherwise.\n\n### odd\\(value\\)\nTest if 'value' is an odd number.\n\n##### Params: \n* **Number** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is an odd number, false otherwise.\n\n### ge\\(value, other\\)\nTest if 'value' is greater than or equal to 'other'.\nAliases: greaterOrEq, greaterOrEqual\n\n##### Params: \n* **Number** *value* value to test.\n* **Number** *other* value to compare with.\n\n##### Returns:\n* **Boolean** true, if value is greater than or equal to other, false otherwise.\n\n### gt\\(value, other\\)\nTest if 'value' is greater than 'other'.\nAliases: greaterThan\n\n##### Params: \n* **Number** *value* value to test.\n* **Number** *other* value to compare with.\n\n##### Returns:\n* **Boolean** true, if value is greater than other, false otherwise.\n\n### le\\(value, other\\)\nTest if 'value' is less than or equal to 'other'.\nAlias: lessThanOrEq, lessThanOrEqual\n\n##### Params: \n* **Number** *value* value to test\n* **Number** *other* value to compare with\n\n##### Returns:\n* **Boolean** true, if 'value' is less than or equal to 'other', false\n  otherwise.\n\n### lt\\(value, other\\)\nTest if 'value' is less than 'other'.\nAlias: lessThan\n\n##### Params: \n* **Number** *value* value to test\n* **Number** *other* value to compare with\n\n##### Returns:\n* **Boolean** true, if 'value' is less than 'other', false otherwise.\n\n### within\\(value, start, finish\\)\nTest if 'value' is within 'start' and 'finish'.\nAlias: withIn\n\n##### Params: \n* **Number** *value* value to test.\n* **Number** *start* lower bound.\n* **Number** *finish* upper bound.\n\n##### Returns:\n* **Boolean** true if 'value' is is within 'start' and 'finish', false\n  otherwise.\n\n### object\\(value\\)\nTest if 'value' is an object. Note: Arrays, RegExps, Date, Error, etc all return\nfalse.\nAlias: obj\n\n##### Params: \n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is an object, false otherwise.\n\n### nonEmptyObject\\(value\\)\nTest if 'value' is an object with properties. Note: Arrays are objects.\nAlias: nonEmptyObj\n\n##### Params: \n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is an object, false otherwise.\n\n### objectInstanceof\\(objInst, objType\\)\nTest if 'value' is an instance type objType.\nAliases: objInstOf, objectinstanceof, instOf, instanceOf\n\n##### Params: \n* **object** *objInst* an object to testfor type.\n* **object** *objType* an object type to compare.\n\n##### Returns:\n* **Boolean** true if 'value' is an object, false otherwise.\n\n### regexp\\(value\\)\nTest if 'value' is a regular expression.\nAlias: regexp\n\n##### Params: \n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a regexp, false otherwise.\n\n### string\\(value\\)\nTest if 'value' is a string.\nAlias: str\n\n##### Params: \n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a string, false otherwise.\n\n### emptyString\\(value\\)\nTest if 'value' is an empty string.\nAlias: emptyStr\n\n##### Params: \n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is am empty string, false otherwise.\n\n### nonEmptyString\\(value\\)\nTest if 'value' is a non-empty string.\nAlias: nonEmptyStr\n\n##### Params: \n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a non-empty string, false otherwise.\n\n### emailAddress\\(value\\)\nTest if value is a valid email address. We're testing only the email address not\nthe user name with an email address, edmond@stdarg.com and not \"Edmond\nMeinfelder\" <edmond@stdarg.com>. The email address does not need a fully\nqualified host, but does expect an '@host', so 'edmond' is false but\n'edmond@stdarg' is true.\nAliases: email, emailAddr\n\n##### Params:\n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a valid email address and false otherwise.\n\n### ipv4Address\\(value\\)\nTest if a value is a valid IPv4 numeric address. Non-routable IPv4 address are\nstill valid addresses. This function expects 4 octets separated by '.' with\nvalid values of 0-255 inclusive.\nAliases: ipv4, ipv4Addr\n\n##### Params:\n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a valid ipv4 address and false otherwise.\n\n### ipv6Address\\(value\\)\nTest if a value is a valid IPv6 numeric address.\nAliases: ipv6, ipv6Addr\n\n##### Params:\n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a valid IPv6 address and false otherwise.\n\n### ipAddress\\(value\\)\nTest if a value is a valid IPv6 or IPv4 numeric address.\nAliases: ip, ipAddr\n\n##### Params:\n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a valid IPv6 or IPv4 address and false\n  otherwise.\n\n### dnsAddress\\(value\\)\nTest if a value is a valid DNS address.\nAliases: dns, dnsAddr\n\n##### Params:\n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a valid DNS address and false otherwise.\n\n### hostAddress\\(value\\)\nTest if a value is a valid IPv4, ipv6 or DNS address.\nAliases: hostIp, hostAddr\n\n##### Params:\n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a valid IPv4, IPv6 or DNS address and false\n  otherwise.\n\n### port\\(value\\)\nTest if a value is a valid TCP/IP port number.\n\n##### Params:\n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a valid port number, and false otherwise.\n\n### systemPort\\(value\\)\nTest if a value is a valid TCP/IP system port number in the range 0 - 1023.\nAlias: sysPort\n\n##### Params:\n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a valid system port number, and false otherwise.\n\n### userPort\\(value\\)\nTest if a value is a valid TCP/IP user port number in the range 1024 - 65535.\n\n##### Params:\n* **Any** *value* to test.\n\n##### Returns:\n* **Boolean** true if 'value' is a valid user port number, and false otherwise.\n\n## License\nThe MIT License (MIT)\n\nCopyright (c) 2013 Edmond Meinfelder\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "is2@0.0.11",
  "dist": {
    "shasum": "971e764cd5a8209d8cd1c8d84eaf05cb1af20015"
  },
  "_from": "is2@0.0.11",
  "_resolved": "https://registry.npmjs.org/is2/-/is2-0.0.11.tgz"
}
