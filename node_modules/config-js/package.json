{
  "name": "config-js",
  "version": "1.0.0",
  "description": "A simple config module. Support for regions and auto-load when file changes.",
  "keywords": [
    "config",
    "configuration",
    "simple",
    "region",
    "const",
    "constant",
    "regions"
  ],
  "author": {
    "name": "Edmond Meinfelder",
    "email": "edmond@stdarg.com"
  },
  "maintainers": "Edmond Meinfelder <edmond@stdarg.com>",
  "homepage": "http://github.com/stdarg/config-js",
  "repository": {
    "type": "git",
    "url": "git@github.com:stdarg/config-js.git"
  },
  "bugs": {
    "url": "http://github.com/stdarg/config-js/issues"
  },
  "license": "MIT",
  "main": "./index.js",
  "scripts": {
    "test": "mocha --reporter list ./test/test.js"
  },
  "engines": {
    "node": ">=v0.8.0"
  },
  "dependencies": {
    "is2": "0.0.12",
    "have": "0.2.3",
    "const-obj": "0.0.3",
    "property-path": "0.0.5"
  },
  "devDependencies": {
    "mocha": "1.17.1"
  },
  "readme": "config.js\n=========\nA config utility for node.js, that uses a single JavaScript file with an export\nJavaScript object. After loading the JavaScript object from the configuration\nfile, all properties are set constant, preventing changes.  However, if the file\nis changed on disk, it is automatically reloaded.\n\nThere is support for environment targets. If you have the environment variable\n`NODE_ENV` set and you have '##' in your file path, config.js substitutes the\n'##' with the contents of `NODE_ENV` and then loads that file. If you have a\nfile named `./conf/app_PRODUCTION.js`, you would load it like so:\n\n    process.env.NODE_ENV = 'PRODUCTION';\n    var Config = require('config-js');\n    var config = new Config('./conf/app_##');\n\n\nconfig.js uses \"have\" to validate arguments passed to it. If you pass incorrect\narguement types, have will throw. You should not wrap your calls in try/catch\nhandlers, but test the inputs you are using. The logic is, if you are not\npassing the correct types, it's a bug to fix not a run-time situation to handle.\n\n## Installation\n\n    $ npm install config-js\n\n## Examples\nThe configuration file should export an object via module exports as seen in the\nfollowing example:\n\n    module.exports = {\n    \n        logging : {\n            level: 'info',              // INFO logging level\n            name: 'mush.js',            // Category name for logging\n        },\n    \n        server : { port : 4201 }\n    };\n\nUsing the above configuration file, the following code will not throw an\nexception:\n\n    var Config = require('config-js');\n    var config = new Config('./test/cfg_example.js');\n    assert.ok(config.get('server.port') === 4201);\n    assert.ok(config.get('logging.name') === 'mush.js');\n    // test default value\n    assert.ok(config.get('No.Such.Value.Exists', 511) === 511);\n    assert.ok(config.setSepChr('/') === true);\n    assert.ok(config.get('server/port') === 4201);\n    assert.ok(config.get('logging/name') === 'mush.js');\n\nAdditionally, the configuration file can have regions:\n\n    module.exports = {\n    \n        en: {\n            welcome: \"Welcome to this file.\"\n        },\n    \n        de: {\n            welcome: \"Willkommen zu dieser datei.\"\n        },\n    \n        es: {\n            welcome: \"Bienvenidos a este archivo.\"\n        }\n    };\n\nThe regions can be used with the getByRegion method:\n\n    // if no region is specified, 'en' is assumed.\n    assert.ok(config.getByRegion('welcome') === 'Welcome to this file.');\n\n    // You can change the above assumption in the constructor\n    config = new Config('./test/cfg_example2.js', 'de');\n    assert.ok(config.getByRegion('welcome') === 'Willkommen zu dieser datei.');\n\n    // the get method can still be used\n    assert.ok(config.get('de.welcome') === 'Willkommen zu dieser datei.');\n\n    // and you can always specify the region\n    assert.ok(config.getByRegion('welcome', 'es') === 'Bienvenidos a este archivo.');\n\n## API\n\n### Config(pathToConfigFile [, region])\nConfig provides a simple read-only API to a configuration object.\n\n#### Params: \n\n* **String** *pathToConfigFile* The configuration file\n* **String** *[region]* An optional indicator for the current region (e.g. 'US','JP').\n\n### loadConfig(pathToConfigFile)\nLoads the configuration from the location specified by the parameter.\n\n#### Params: \n\n* **string** *pathToConfigFile* The file name path to the configuration file.\n\n### get(propertyName [, defaultValue] [, sepChr])\nReturn the value associated with the specified property. If no such property is\nfound, the provided defaultValue will be returned or undefined if no defaultValue\nwas provided.\n\n#### Params: \n\n* **string** *propertyName* The name of the property to look for. May include '.' characters indicating an object traversal (e.g. 'parent.child.age', 'parent').\n* **string** *defaultValue* A default value to use in case no property having propertyName was found.\n* **string** *sepChar* Change the default separator character in the path from '.' to whatever you want.\n\n#### Returns:\n\n* The value found, if no value is found, then the default value. If there is no default value then undefined.\n\n### getByRegion(propertyName [, defaultValue] [,sepChar])\nReturn the region-specific value associated with the specified property. If no such property\nis found, the provided defaultValue will be returned or undefined if no defaultValue\nwas provided.  The region should be provided in the constructor to this object.\nIf no region was specified when this object was created, the defaultValue will be returned.\n\n#### Params: \n\n* **String** *propertyName* The name of the property to look for. May include '.' characters indicating an object traversal (e.g. 'parent.child.age', 'parent').\n* **String** *defaultValue* A default value to use in case no property having propertyName was found.\n* **string** *sepChar* Change the default separator character in the path from '.' to whatever you want.\n\n#### Returns:\n\n* The value found, if no value is found, then the default value. If there is no default value, then undefined.\n\n### setSepChr(chr)\nChange the default separator character from '.' to whatever character you want.\n\n#### Params:\n* **string** *chr* The new default separator character in the path.\n\n#### Returns:\n\n* {Boolean} True if the value was set and false otherwise.\n\n## License\n\nThe MIT License (MIT)\n\nCopyright (c) 2013,2014 Edmond Meinfelder\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n",
  "readmeFilename": "README.md",
  "_id": "config-js@1.0.0",
  "_from": "config-js@"
}
